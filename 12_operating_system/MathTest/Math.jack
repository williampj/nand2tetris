// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
  static Array twoToTheI;
  
  /** Initializes the library. */
  function void init() {
    let twoToTheI = Array.new(16);
    let twoToTheI[0]  = 1;
    let twoToTheI[1]  = 2;
    let twoToTheI[2]  = 4;
    let twoToTheI[3]  = 8;
    let twoToTheI[4]  = 16;
    let twoToTheI[5]  = 32;
    let twoToTheI[6]  = 64;
    let twoToTheI[7]  = 128;
    let twoToTheI[8]  = 256;
    let twoToTheI[9]  = 512;
    let twoToTheI[10] = 1024;
    let twoToTheI[11] = 2048;
    let twoToTheI[12] = 4096;
    let twoToTheI[13] = 8192;
    let twoToTheI[14] = 16384;
    let twoToTheI[15] = 16384 + 16384;

    return;
  }

  /** Returns the absolute value of x. */
  function int abs(int x) {
    if (x > 0) {
      return x;
    } else {
      return -x;
    }
  }

  /** Returns the product of x and y. 
    *  When a Jack compiler detects the multiplication operator '*' in the 
    *  program's code, it handles it by invoking this method. In other words,
    *  the Jack expressions x*y and multiply(x,y) return the same value.
    */
  function int multiply(int x, int y) {
    var int i, result, shiftedX, negatives, mask;

    if (x = 1) {
      return y;
    }
    if (y = 1) {
      return x;
    }
    if ((x = 0) | (y = 0)) {
      return 0;
    }
  
    let i = 0;
    let result = 0;
    let shiftedX = x;
    let negatives = 0;

    if (y < 0) {
      let y = -y;
      let negatives = negatives + 1;
    }

    let mask = twoToTheI[i];
    
    while (i < 16) {
      // Using bitwise masking
      if (mask & y) {
        let result = result + shiftedX;
      }

      let shiftedX = shiftedX + shiftedX;
      let i = i + 1;
      let mask = twoToTheI[i];
    }

    if (negatives = 1) {
      return -result;
    } else {
      return result;
    }

  }

  /** Returns the integer part of x/y.
    *  When a Jack compiler detects the multiplication operator '/' in the 
    *  program's code, it handles it by invoking this method. In other words,
    *  the Jack expressions x/y and divide(x,y) return the same value.
    */
  function int divide(int x, int y) {
    var int q, twoQ, result;
    
    if (y = 0) {
      do Sys.error(3); // Division by zero
    }

    if (x < 0) {
      return -Math.divide(-x, y);
    }

    if (y < 0) {
      return -Math.divide(x, -y);
    }

    if (y > x) {
      return 0;
    }

    let q = Math.divide(x, y + y);
    let twoQ = q + q;
    
    if ((x - (twoQ * y)) < y) {
      let result = twoQ;
    } else {
      let result = (twoQ + 1);
    }

    return result;
  }

  /** Returns the integer part of the square root of x. 
  * Implemented as a binary search for the answer
  */
  function int sqrt(int x) {
    var int low, high, mid, square, result;

    // base cases
    if (x < 0) {
      do Sys.error(4); // Cannot compute square root of a negative number
    }
    
    if (x < 2) {
      return x;
    }

    let low = 1;
    let high = 181; // highest possible square root of a 16-bit number
    let result = 0;

    while ((low < high) | (low = high)) {
      let mid = (high + low) / 2;
      let square = mid * mid;

      if (square = x) {
        return mid;
      }

      if (square > x) {
        let high = mid - 1;
      } else {
        let low = mid + 1;  
        let result = mid; // setting a floor to mid
      }
    }

    return result;
  }

  /** Returns the greater number. */
  function int max(int a, int b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  }

  /** Returns the smaller number. */
  function int min(int a, int b) {
    if (a < b) {
      return a;
    } else {
      return b;
    }
  }
}