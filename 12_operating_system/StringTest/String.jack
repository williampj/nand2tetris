// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array stringArray; // [0..-3] = content, [-2] = length, [-1] = maxLength
    field int maximumLength, length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength < 0) {
        do Sys.error(14); // Maximum length must be non-negative
      }
      
      let maximumLength = maxLength + 1; // must be space for at least one element in the array
      let length = 0;
      let stringArray = Array.new(maximumLength);
      
      return this; 
    } 

    /** Disposes this string. */
    method void dispose() {
      do stringArray.dispose();
      do Memory.deAlloc(this);

      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      if ((j < 0) | (j > length - 1)) {
        do Sys.error(15); // String index out of bounds
      }

      return stringArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if ((j < 0) | (j > length - 1)) {
        do Sys.error(16); // // String index out of bounds
      }
      
      let stringArray[j] = c;

      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length > (maximumLength - 1)) {
        do Sys.error(17); // String is full
      }

      let stringArray[length] = c;
      let length = length + 1;
        
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (length = 0) {
        do Sys.error(18); // String is empty
      }

      let length = length - 1;
      let stringArray[length] = null;

      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int val, i, digit;
      var boolean positive; 

      let val = 0;
      let i = 0;
      
      if (stringArray[i] = 45) {
        let positive = false;
        let i = 1;
      } else {
        let positive = true;
      }

      while (i < length) {
        let digit = stringArray[i] - 48;
        let val = (val * 10) + digit;
        let i = i + 1;
      }

      if (positive) {
        return val;
      } else {
        return -val;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int digit, c, i;
      var Array temp;

      let length = 0;
      let temp = Array.new(16);
      let i = 0;
      
      if (val < 0) {
        if (length > (maximumLength - 1)) {
          do Sys.error(19); // Insufficient string capacity
        }
        do appendChar(45);
        let val = -val;
      } 
      
      while (val > 0) {
        let digit = val - ( 10 * (val / 10) );
        let val = val / 10;
        let temp[i] = digit; 
        let i = i + 1;
      }

      let i = i - 1;

      while ((i > 0) | (i = 0)) {
        if (length > (maximumLength - 1)) {
          do Sys.error(19); // Insufficient string capacity
        }

        let c = temp[i] + 48;
        do appendChar(c);
        let i = i - 1;
      }
      
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
